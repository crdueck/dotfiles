filetype off

" Plugins
""""""""
call plug#begin('~/.vim/bundle')

Plug 'SirVer/ultisnips'
Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clang-completer --go-completer' }
Plug 'christoomey/vim-tmux-navigator'
Plug 'ervandew/supertab'
Plug 'fatih/vim-go', { 'for': 'go' }
Plug 'honza/vim-snippets'
Plug 'itchyny/lightline.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'joshdick/onedark.vim'
Plug 'junegunn/fzf.vim' | Plug '/usr/local/opt/fzf'
Plug 'junegunn/vim-easy-align'
Plug 'justinmk/vim-sneak'
Plug 'ludovicchabant/vim-gutentags'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-vinegar'
Plug 'w0rp/ale'

call plug#end()

" Preamble
""""""""""
colorscheme onedark

let mapleader=","
let g:onedark_termcolors=16

" General
"""""""""
set autoread
set background=dark
set dictionary=/usr/share/dict/words
set diffopt=filler,vertical
set encoding=utf-8
set grepformat^=%f:%l:%c:%m
set grepprg=rg\ --vimgrep
set hidden
set history=1000
set laststatus=2
set lazyredraw
set mouse=a
set nobackup
set noshowmode
set noswapfile
set number
set pastetoggle=<F12>
set scrolljump=5
set scrolloff=3
set shell=zsh
set shortmess+=aoOtT
set showbreak=↵
set splitright
set synmaxcol=800
set t_Co=256
set tags=./tags;
set timeoutlen=500
set ttyfast

" Search/Complete
"""""""""""""""""
set completeopt=menu,menuone,longest
set hlsearch
set ignorecase
set incsearch
set magic
set smartcase

" Wildmenu
""""""""""
set wildmenu
set wildmode=list:longest

set wildignore+=*.hg,*.git,*.svn                " Version control
set wildignore+=*aux,*.out,*.toc,*.log          " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg  " binary images
set wildignore+=*.o,*.obj,*.exe,*.hi            " compiled object files
set wildignore+=*spl                            " compiled spelling word lists
set wildignore+=*sw?                            " Vim swap files
set wildignore+=*DS_Store                       " OSX bullshit
set wildignore+=*luac                           " Lua byte code
set wildignore+=mgrations                       " Django migrations
set wildignore+=*.pyc                           " Python byte code
set wildignore+=target                          " SBT target directories
set wildignorecase

" Folding
"""""""""
set foldmethod=manual
set foldnestmax=3
set nofoldenable

" Formatting & Whitespace
"""""""""""""""""""""""""
set autoindent
set backspace=eol,indent,start
set expandtab
set formatoptions=crqj
set linebreak
set list
set listchars=tab:▷•,trail:•,nbsp:⋅
set shiftwidth=4
set smarttab
set textwidth=80
set nowrap

" Plugins
"""""""""

" easy-align
nmap ga <Plug>(EasyAlign)
vmap <Enter> <Plug>(EasyAlign)

" fugitive
nnoremap <leader>gc  :Gcommit -v -q<CR>
nnoremap <leader>gco :Gread<CR>
nnoremap <leader>gia :Gwrite<CR>
nnoremap <leader>gwd :Gdiff<CR>
nnoremap <leader>gws :Gstatus<CR>

" gutentags
let g:gutentags_cache_dir = "~/.cache/gutentags"
let g:gutentags_ctags_exclude = ['*.css', '*.html', '*.js']

" fzf
nnoremap <C-p> :Files<CR>
nnoremap <C-o> :Buffers<CR>
nnoremap <C-g> :GFiles?<CR>

imap <c-x><c-l> <plug>(fzf-complete-line)

nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

nnoremap <leader>rg :Rg<CR>
command! -bang -nargs=* Rg
    \ call fzf#vim#grep(
    \   'rg --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
    \   <bang>0 ? fzf#vim#with_preview('up:60%')
    \           : fzf#vim#with_preview('right:50%', '?'),
    \   <bang>0)

let g:fzf_colors = {
  \ 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'],
  \ }

let g:fzf_action = {
      \ 'ctrl-s': 'split',
      \ 'ctrl-v': 'vsplit',
      \ }

" lightline
let g:lightline = {
      \ 'colorscheme': 'onedark',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'readonly', 'filename' ],
      \             [ 'git-branch' ] ],
      \   'right': [ [ 'lineinfo' ],
      \              [ 'percent' ],
      \              [ 'filetype' ] ],
      \ },
      \ 'component_function': {
      \   'git-branch': 'LightlineFugitive',
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' },
      \ }

function! LightlineFugitive()
    if exists('*fugitive#head')
        let branch = fugitive#head()
        return branch !=# '' ? ' '.branch : ''
    endif
    return ''
endfunction

" vim-go
let g:go_highlight_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1

let g:go_auto_type_info = 1
let g:go_fmt_command = "goimports"

" supertab
let g:SuperTabDefaultCompletionType="<C-n>"

" tagbar
nnoremap <silent> <leader>z :TagbarToggle<CR>
let g:tagbar_autofocus=1
let g:tagbar_compact=1
let g:tagbar_foldlevel=0

let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

let g:tagbar_type_make = {
    \ 'kinds': [ 'm:macros', 't:targets' ]
\}

" ultisnips
inoremap <expr> <CR> pumvisible() ? "\<C-k>" : "\<CR>"
let g:UltiSnipsExpandTrigger="<C-k>"
let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"
let g:UltiSnipsJumpForwardTrigger="<Tab>"

" YouCompleteMe
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_key_list_previous_completion=['<C-p>']
let g:ycm_key_list_select_completion=['<C-n>']
let g:ycm_semantic_triggers = { 'haskell': ['.'] }

" Command mode
""""""""""""""
cnoremap ww :SudoWrite<CR>
cnoremap qq qa!

" Visual mode
"""""""""""""
vnoremap <leader>s :w !curl -sF 'sprunge=<-' http://sprunge.us<CR>

" Normal mode
"""""""""""""
" jump between parentheses with <tab>
nnoremap <tab> %

" save 1,000,000 keystrokes
nnoremap ; :
" preserve ; functionality
nnoremap ;; ;

" prefer to jump to exact column/row
nnoremap ' `
nnoremap ` '

" remove trailing whitespace
nnoremap <leader>w :call Preserve("%s/\\s\\+$//e")<CR>
" remove consecutive lines of whitespace
nnoremap <leader>ww :call Preserve(":v/./,/./-j")<CR>

" go to older change
nnoremap g; g;zz
" go to newer change
nnoremap g, g,zz
" go to last position
nnoremap '' ''zz

nnoremap j gj
nnoremap k gk

" center search results
nnoremap n nzzzv
nnoremap N Nzzzv

" stop x and c from clobbering the yank register
nnoremap x "_x
nnoremap c "_c

" make Y behave like C and D
nnoremap Y y$

" execute 'q' macro instead of the annoying Ex mode
nnoremap Q @q

nnoremap <silent> <space> :nohlsearch<CR>

if &diff
    " last/next diff
    nunmap n
    nnoremap n [czz
    nnoremap p ]czz

    nnoremap <leader>g :diffget<CR>
    nnoremap <leader>p :diffput<CR>
    nnoremap <leader>u :diffupdate<CR>
endif

" show last search results in quickfix window
nnoremap <silent> <leader>/ :execute 'vimgrep /'.@/.'/g %'<CR>:copen 6<CR>

" syntax highlighting information
noremap <leader>si :call <SID>SynStack()<CR>

nnoremap <leader>rr :redr!<CR>

" Equalize open windows, while respecting winfix(height|width)
nnoremap = :wincmd =<CR>

" Autocommands
""""""""""""""
autocmd FileType help wincmd L
autocmd InsertLeave * set nopaste

augroup ft_docker
    autocmd!
    autocmd BufNewFile,BufRead Dockerfile* set filetype=dockerfile
augroup END

augroup ft_glsl
    autocmd!
    autocmd BufNewFile,BufRead *.glsl set filetype=glsl
augroup END

augroup ft_go
    autocmd!
    autocmd FileType go nmap <leader>b <Plug>(go-build)
    autocmd FileType go nmap <leader>c <Plug>(go-coverage)
    autocmd FileType go nmap <leader>i <Plug>(go-info)
    autocmd FileType go nmap <leader>l <Plug>(go-lint)
    autocmd FileType go nmap <leader>r <Plug>(go-run)
    autocmd FileType go nmap <leader>s <Plug>(go-implements)
    autocmd FileType go nmap <leader>t <Plug>(go-test)
augroup END

augroup ft_java
    autocmd!
    autocmd FileType java let g:ale_enabled=0
augroup END

augroup ft_haskell
    autocmd!
    autocmd BufRead *.dump-simpl set filetype=haskell
    autocmd BufRead *.lhs,*hsc set filetype=lhaskell
    autocmd FileType haskell nnoremap <F4> :!ghci %<CR>
    autocmd FileType haskell nnoremap <leader>b :!stack build<CR>
    autocmd FileType haskell nnoremap <leader>r :!stack repl<CR>
    autocmd FileType haskell nnoremap <leader>t :!stack test<CR>
    autocmd FileType haskell setlocal makeprg=stack\ repl
augroup END

augroup ft_html
    autocmd!
    autocmd FileType html,xml setlocal shiftwidth=4 tabstop=4
augroup END

augroup ft_nginx
    autocmd!
    autocmd BufRead *rewrite_rules/*.conf set ft=nginx
augroup END

augroup ft_python
    autocmd!
    autocmd FileType python nnoremap <leader>r :!python %<CR>
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
augroup END

augroup ft_javascript
    autocmd!
    autocmd FileType javascript nnoremap <leader>l :!npm run lint<CR>
    autocmd FileType javascript nnoremap <leader>r :!npm start<CR>
    autocmd FileType javascript nnoremap <leader>t :!npm test<CR>
    autocmd Filetype javascript setlocal shiftwidth=2 tabstop=2
augroup END

augroup ft_tex
    autocmd!
    autocmd BufNewFile,BufRead *.tex set filetype=tex
    autocmd FileType tex nnoremap <F4> :!pdflatex %<CR>
    autocmd FileType tex setlocal commentstring=%\ %s
    autocmd FileType tex setlocal formatoptions+=t
    autocmd BufWrite tex :!pdflatex %<CR>
augroup END

augroup ft_tmux
    autocmd!
    autocmd BufRead .tmux.conf set filetype=tmux
augroup END

augroup ft_php
    autocmd!
    autocmd BufNewFile,BufRead *.phps set filetype=php
    autocmd FileType php setlocal omnifunc=phpcomplete#CompletePHP
augroup END

" Custom Functions
""""""""""""""""""
function! Preserve(command)
    " Preparation: save last search, and cursor position
    let s = @
    let l = line(".")
    let c = col(".")
    " Do the deed:
    execute a:command
    " Clean up: restore previous search history, and cursor position
    let @/ = s
    call cursor(l, c)
endfunction

function! <SID>SynStack()
    if exists("*synstack")
        echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
    endif
endfunction

" GViM settings
"""""""""""""""
if has('gui_running')
    set guioptions=
    set guiheadroom=0

    autocmd FocusLost * silent! wa
endif
