" Preamble {{{
call plug#begin('~/.vim/bundle')

Plug 'SirVer/ultisnips'
Plug 'davidhalter/jedi-vim', { 'for': 'python' }
Plug 'dense-analysis/ale'
Plug 'fatih/vim-go', { 'for': 'go' }
Plug 'honza/vim-snippets'
Plug 'itchyny/lightline.vim'
Plug 'maximbaz/lightline-ale'
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/fzf.vim'
Plug 'kaicataldo/material.vim'
Plug 'ludovicchabant/vim-gutentags'
Plug 'maralla/completor.vim'
Plug 'sheerun/vim-polyglot'
Plug 'tommcdo/vim-lion'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-vinegar'

call plug#end()

let mapleader=","

let g:material_theme_style = 'darker'
colorscheme material
" }}}

" General {{{
set autoread
set background=dark
set diffopt=filler,vertical
set encoding=utf-8
set grepformat^=%f:%l:%c:%m
set grepprg=rg\ --vimgrep
set hidden
set history=1000
set lazyredraw
set mouse=a
set nobackup
set noshowmode
set noswapfile
set number
set pastetoggle=<F12>
set scrolljump=5
set scrolloff=3
set shell=zsh
set shortmess+=c
set showbreak=↵
set splitright
set t_Co=256
set tags=./tags;
set ttimeout
set ttimeoutlen=100
" }

" Search/Complete {
set complete-=i
set completeopt=menuone,noselect
set hlsearch
set ignorecase
set incsearch
set magic
set smartcase

" Wildmenu
set wildmenu
set wildmode=list:longest

set wildignore+=*.hg,*.git,*.svn                " Version control
set wildignore+=*aux,*.out,*.toc,*.log          " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg  " binary images
set wildignore+=*.o,*.obj,*.exe,*.hi            " compiled object files
set wildignore+=*spl                            " compiled spelling word lists
set wildignore+=*sw?                            " Vim swap files
set wildignore+=*DS_Store                       " OSX bullshit
set wildignore+=*luac                           " Lua byte code
set wildignore+=mgrations                       " Django migrations
set wildignore+=*.pyc                           " Python byte code
set wildignore+=target                          " SBT target directories
set wildignorecase

" Folding
set foldmethod=manual
set nofoldenable

" Formatting & Whitespace
set autoindent
set backspace=eol,indent,start
set expandtab
set formatoptions=crqj
set linebreak
set list
set listchars=tab:▷•,trail:•,nbsp:⋅,extends:…
set shiftwidth=4
set smarttab
set textwidth=80
set nowrap
" }}}

" Plugins {{{

" auto-pairs
let g:AutoPairsMapCR = 0
let g:AutoPairsMultilineClose = 0

" completor
let g:completor_complete_options = 'menuone,noselect'
let g:completor_gocode_binary = expand('~/go/bin/gocode')

" fzf
nnoremap <leader>f :Files<cr>
nnoremap <leader>? :GFiles?<cr>
nnoremap <leader><space> :Buffers<cr>

let g:fzf_action = { 'ctrl-s': 'split', 'ctrl-v': 'vsplit' }

" vim-go
let g:go_highlight_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_fmt_command = "goimports"

" gutentags
let g:gutentags_cache_dir = "~/.cache/gutentags"
let g:gutentags_ctags_exclude = ['*.css', '*.html', '*.js']

" lightline
set laststatus=2
let g:lightline = {
      \ 'colorscheme': 'material_vim',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'filename', 'modified' ],
      \             [ 'git-branch'] ],
      \   'right': [ [ 'percent' ] ,
      \              [ 'filetype' ],
      \              [ 'linter_errors', 'linter_warnings', 'linter_infos' ] ]
      \ },
      \ 'component_function': {
      \   'git-branch': 'LightlineFugitive',
      \ },
      \ 'component_expand': {
      \   'linter_infos': 'lightline#ale#infos',
      \   'linter_warnings': 'lightline#ale#warnings',
      \   'linter_errors': 'lightline#ale#errors',
      \   'linter_ok': 'lightline#ale#ok',
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' }
      \ }

function! LightlineFugitive() abort
    if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && exists('*FugitiveHead')
        let branch = FugitiveHead()
        return branch !=# "" ? " " . branch : ""
    endif
    return ''
endfunction

" ultisnips
let g:UltiSnipsExpandTrigger="<NUL>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

inoremap <expr> <tab> pumvisible() ? "\<c-n>" : "\<tab>"
inoremap <expr> <s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"
inoremap <expr> <cr> pumvisible() ? "\<c-r>=UltiSnips#ExpandSnippet()\<cr>" : "\<cr>"

" }}}

" Key Mappings {{{

" force quit
cnoremap qq qa!

" search/replace visual selection
xnoremap gs y:s/<c-r>"//g<left><left>
xnoremap Gs y:%s/<c-r>"//g<left><left>

nnoremap <c-h> <c-w>h<cr>
nnoremap <c-l> <c-w>l<cr>
nnoremap <c-j> <c-w>j<cr>
nnoremap <c-k> <c-w>k<cr>

" save 1,000,000 keystrokes
nnoremap ; :
" preserve ; functionality
nnoremap ;; ;

" prefer to jump to exact column/row
nnoremap ' `
nnoremap ` '

" remove trailing whitespace
nnoremap <leader>w :call Preserve("%s/\\s\\+$//e")<cr>

function! Preserve(command) abort
    let l = line(".")
    let c = col(".")
    execute a:command
    call cursor(l, c)
endfunction

nnoremap j gj
nnoremap k gk

" stop x and c from clobbering yank register
nnoremap x "_x
nnoremap c "_c

" make Y behave like C and D
nnoremap Y y$

" execute 'q' macro instead of the annoying Ex mode
nnoremap Q @q

nnoremap <silent> <space> :nohlsearch<cr>

" show last search results in quickfix window
nnoremap <silent> <leader>/ :execute 'vimgrep /'.@/.'/g %'<cr>:copen 6<cr>
" }}}

" Autocommands {{{
autocmd FileType help wincmd L
autocmd InsertLeave * set nopaste

augroup ft_go
    autocmd!
    autocmd FileType go nmap <leader>b <plug>(go-build)
    autocmd FileType go nmap <leader>r <plug>(go-run)
    autocmd FileType go nmap <leader>t <plug>(go-test)
augroup END

augroup ft_haskell
    autocmd!
    autocmd BufRead *.dump-simpl set filetype=haskell
    autocmd FileType haskell nnoremap <leader>b :make build<cr>
    autocmd FileType haskell nnoremap <leader>r :make runghc %<cr>
    autocmd FileType haskell nnoremap <leader>t :make test<cr>
    autocmd FileType haskell setlocal makeprg=stack
    autocmd FileType haskell let g:ale_enabled=0
augroup END

augroup ft_python
    autocmd!
    autocmd FileType python nnoremap <leader>r :!python3 %<cr>
augroup END

augroup ft_javascript
    autocmd!
    autocmd FileType javascript nnoremap <leader>r :!npm start<cr>
    autocmd FileType javascript nnoremap <leader>t :!npm test<cr>
augroup END

augroup ft_tex
    autocmd!
    autocmd BufWrite tex :!pdflatex %<cr>
    autocmd FileType tex nnoremap <leader>b :!pdflatex %<cr>
    autocmd FileType tex setlocal formatoptions+=t
augroup END
" }}}
