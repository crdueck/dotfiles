" vimrc
filetype off

" Vundle
""""""""
set runtimepath+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'

Plugin 'Raimondi/delimitMate'
Plugin 'SirVer/ultisnips'
Plugin 'Valloric/YouCompleteMe'
Plugin 'altercation/vim-colors-solarized'
Plugin 'chriskempson/base16-vim'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'ervandew/supertab'
Plugin 'fatih/vim-go'
Plugin 'honza/vim-snippets'
Plugin 'itchyny/lightline.vim'
Plugin 'junegunn/fzf.vim'
Plugin 'junegunn/vim-easy-align'
Plugin 'justinmk/vim-sneak'
Plugin 'ludovicchabant/vim-gutentags'
Plugin 'majutsushi/tagbar'
Plugin 'neovimhaskell/haskell-vim'
Plugin 'scrooloose/nerdtree'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-surround'
Plugin 'w0rp/ale'

Plugin 'ryanoasis/vim-devicons'

call vundle#end()

" Preamble
""""""""""
syntax enable
filetype plugin indent on
colorscheme base16-default-dark

let mapleader=","

" General
"""""""""
set autoread
set background=dark
set cursorline
set diffopt=filler,vertical
set encoding=utf-8
set grepprg=rg\ --vimgrep
set grepformat^=%f:%l:%c:%m
set hidden
set history=1000
set lazyredraw
set mouse=a
set nobackup
set noswapfile
set number
set pastetoggle=<F12>
set scrolljump=5
set scrolloff=3
set shell=zsh
set shortmess+=aoOtT
set showbreak=↵
set showcmd
set noshowmode
set splitright
set t_Co=256
set tags=./tags;
set timeoutlen=500
set ttyfast

" Search/Complete
"""""""""""""""""
set completeopt=menu,menuone,longest
set hlsearch
set ignorecase
set incsearch
set magic
set smartcase

" Wildmenu
""""""""""
set wildmenu
set wildmode=list:longest

set wildignore+=*.hg,*.git,*.svn                " Version control
set wildignore+=*aux,*.out,*.toc,*.log          " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg  " binary images
set wildignore+=*.o,*.obj,*.exe,*.hi            " compiled object files
set wildignore+=*spl                            " compiled spelling word lists
set wildignore+=*sw?                            " Vim swap files
set wildignore+=*DS_Store                       " OSX bullshit
set wildignore+=*luac                           " Lua byte code
set wildignore+=mgrations                       " Django migrations
set wildignore+=*.pyc                           " Python byte code
set wildignore+=target                          " SBT target directories
set wildignorecase

" Folding
"""""""""
set foldmethod=manual
set foldnestmax=3
set nofoldenable

" Formatting & Whitespace
"""""""""""""""""""""""""
set autoindent
set backspace=eol,indent,start
set expandtab
set formatoptions=crqj
set linebreak
set list
set listchars=tab:▷•,trail:•,nbsp:⋅,extends:…
set shiftwidth=4
set smarttab
set textwidth=80
set nowrap

" Plugins
"""""""""

" delimitMate
let g:delimitMate_expand_cr = 1

" easy-align
vmap <Enter> <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" fugitive
nnoremap <leader>gc :Gcommit -v -q<CR>
nnoremap <leader>gco :Gcheckout<Space>
nnoremap <leader>gia :Gwrite<CR>
nnoremap <leader>gl :silent! Glog<CR>:bot copen<CR>
nnoremap <leader>gwd :Gdiff<CR>
nnoremap <leader>gws :Gstatus<CR>

" gutentags
let g:gutentags_ctags_exclude = ['*.css', '*.html', '*.js']

" fzf
nnoremap <C-p> :FZF<CR>
nnoremap <leader>s :call fzf#vim#tags(expand('<cword>'), {'options': '--exact --select-1 --exit-0'})<CR>

let g:fzf_action = {
      \ 'ctrl-s': 'split',
      \ 'ctrl-v': 'vsplit'
      \ }

" lightline
set laststatus=2
let g:lightline = {
      \ 'colorscheme': 'solarized',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'filename' ],
      \             [ 'git-branch', 'modified' ] ],
      \   'right': [ [ 'lineinfo' ],
      \              [ 'percent' ],
      \              [ 'filetype' ] ]
      \ },
      \ 'component_function': {
      \   'git-branch': 'LightlineFugitive',
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' }
      \ }


function! LightlineFugitive()
    if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && exists('*fugitive#head')
      let branch = fugitive#head()
      return branch !=# '' ?  ' '.branch : ''
    endif
    return ''
endfunction

" vim-go
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1

" tagbar
nnoremap <silent> <leader>z :TagbarToggle<CR>
let g:tagbar_autofocus=1
let g:tagbar_compact=1
let g:tagbar_foldlevel=0

let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

let g:tagbar_type_make = {
    \ 'kinds':[ 'm:macros', 't:targets' ]
\ }

" nerdtree
nnoremap <silent> <leader>v :NERDTreeToggle<CR>
autocmd Filetype nerdtree setlocal nolist
let g:NERDTreeShowHidden = 1
let g:NERDTreeMinimalUI = 1
let g:NERDTreeAutoDeleteBuffer = 1

" ultisnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:SuperTabDefaulCompletionType="<C-n>"

" ale
let g:ale_linters = { 'haskell': ['ghc'] }

" YouCompleteMe
let g:ycm_key_list_select_completion=['<C-n>']
let g:ycm_key_list_previous_completion=['<C-p>']
let g:ycm_semantic_triggers={'haskell': ['.']}

" Command mode
""""""""""""""
cnoremap ww w !sudo tee % >/dev/null
cnoremap qq qa!
cnoremap cwd lcd %:p:h

" Visual mode
"""""""""""""
xnoremap <leader>s :w !curl -sF 'sprunge=<-' http://sprunge.us<CR>

" Normal mode
"""""""""""""
" jump between parentheses with <tab>
nnoremap <tab> %

" save 1,000,000 keystrokes
nnoremap ; :
" preserve ; functionality
nnoremap ;; ;

" prefer to jump to exact column/row
nnoremap ' `
nnoremap ` '

" autoindent entire file
nnoremap <leader>= :call Preserve("normal gg=G")<CR>
" autoformat entire file
nnoremap <leader>q :call Preserve("normal gggqG")<CR>
" remove multiple lines of whitespace
nnoremap <leader>l :call Preserve(":v/./,/./-j")<CR>
" remove trailing whitespace
nnoremap <leader>w :call Preserve("%s/\\s\\+$//e")<CR>

" go to older change
nnoremap g; g;zz
" go to newer change
nnoremap g, g,zz
" go to last position
nnoremap '' ''zz

nnoremap j gj
nnoremap k gk

" center search results
nnoremap n nzzzv
nnoremap N Nzzzv

" make Y behave like C and D
nnoremap Y y$

" execute 'q' macro instead of the annoying Ex mode
nnoremap Q @q

nnoremap <silent> <space> :nohlsearch<CR>

if &diff
    " last/next diff
    nunmap n
    nnoremap n [czz
    nnoremap p ]czz

    nnoremap <leader>g :diffget<CR>
    nnoremap <leader>p :diffput<CR>
    nnoremap <leader>u :diffupdate<CR>
endif

" show last search results in quickfix window
nnoremap <silent> <leader>/ :execute 'vimgrep /'.@/.'/g %'<CR>:copen 6<CR>

" syntax highlighting information
noremap <leader>si :call <SID>SynStack()<CR>

" sane window movement
"nnoremap <C-j> <C-w>j
"nnoremap <C-k> <C-w>k
"nnoremap <C-h> <C-w>h
"nnoremap <C-l> <C-w>l

" Autocommands
""""""""""""""
autocmd FileType help wincmd L
autocmd InsertLeave * set nopaste

augroup ft_glsl
    autocmd!
    autocmd BufNewFile,BufRead *.glsl set filetype=glsl
augroup END

augroup ft_go
    autocmd!
    autocmd FileType go nmap <leader>b <Plug>(go-build)
    autocmd FileType go nmap <leader>c <Plug>(go-coverage)
    autocmd FileType go nmap <leader>i <Plug>(go-info)
    autocmd FileType go nmap <leader>l <Plug>(go-lint)
    autocmd FileType go nmap <leader>r <Plug>(go-run)
    autocmd FileType go nmap <leader>s <Plug>(go-implements)
    autocmd FileType go nmap <leader>t <Plug>(go-test)
augroup END

augroup ft_haskell
    autocmd!
    autocmd BufRead *.dump-simpl set filetype=haskell
    autocmd BufRead *.lhs set filetype=lhaskell
    autocmd BufRead *.hsc set filetype=lhaskell
    autocmd FileType haskell nnoremap <F4> :!ghci %<CR>
    autocmd FileType haskell nnoremap <leader>b :!stack build<CR>
    autocmd FileType haskell nnoremap <leader>r :!stack repl<CR>
    autocmd FileType haskell nnoremap <leader>t :!stack test<CR>
    autocmd FileType haskell setlocal makeprg=stack\ repl
augroup END

augroup ft_html
    autocmd!
    autocmd FileType html,xml setlocal shiftwidth=4 tabstop=4
augroup END

augroup ft_python
    autocmd!
    autocmd FileType python nnoremap <leader>r :!python %<CR>
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
augroup END

augroup ft_javascript
    autocmd!
    autocmd FileType javascript nnoremap <leader>l :!npm run lint<CR>
    autocmd FileType javascript nnoremap <leader>r :!npm start<CR>
    autocmd FileType javascript nnoremap <leader>t :!npm test<CR>
augroup END

augroup ft_markdown
    autocmd!
    autocmd BufNewFile,BufRead *.md set filetype=markdown
augroup END

augroup ft_tex
    autocmd!
    autocmd BufNewFile,BufRead *.tex set filetype=tex
    autocmd FileType tex nnoremap <F4> :!pdflatex %<CR>
    autocmd FileType tex setlocal commentstring=%\ %s
    autocmd FileType tex setlocal formatoptions+=t
    autocmd BufWrite tex :!pdflatex %<CR>
augroup END

augroup ft_tmux
    autocmd!
    autocmd BufRead .tmux.conf set filetype=tmux
augroup END

" Custom Functions
""""""""""""""""""
function! Preserve(command)
    " Preparation: save last search, and cursor position
    let s = @
    let l = line(".")
    let c = col(".")
    " Do the deed:
    execute a:command
    " Clean up: restore previous search history, and cursor position
    let @/ = s
    call cursor(l, c)
endfunction

function! <SID>SynStack()
    if exists("*synstack")
        echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
    endif
endfunction

" GViM settings
"""""""""""""""
if has('gui_running')
    set guioptions=
    set guiheadroom=0

    autocmd FocusLost * silent! wa
endif
