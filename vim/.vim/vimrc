" Plugins {{{

call plug#begin('~/.vim/bundle')

Plug 'SirVer/ultisnips'
Plug 'arcticicestudio/nord-vim'
Plug 'chriskempson/base16-vim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'davidhalter/jedi-vim', { 'for': 'python' }
Plug 'fatih/vim-go', { 'for': 'go' }
Plug 'hashivim/vim-terraform', { 'for': 'terraform' }
Plug 'honza/vim-snippets'
Plug 'itchyny/lightline.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'joshdick/onedark.vim'
Plug 'junegunn/fzf.vim' | Plug '/usr/local/opt/fzf'
Plug 'justinmk/vim-sneak'
Plug 'ludovicchabant/vim-gutentags'
Plug 'maralla/completor.vim'
Plug 'sheerun/vim-polyglot'
Plug 'tommcdo/vim-lion'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-vinegar'
Plug 'w0rp/ale'

call plug#end()

" }}}

" Editor Settings {{{

colorscheme nord
let g:onedark_termcolors=16

" general
set autoread
set autowrite
set background=dark
set backspace=eol,indent,start
set belloff=all
set dictionary=/usr/share/dict/words
set diffopt=filler,vertical
set encoding=utf-8
set grepformat^=%f:%l:%c:%m
set grepprg=rg\ --vimgrep
set hidden
set history=1000
set laststatus=2
set lazyredraw
set mouse=a
set nobackup
set noshowmode
set noswapfile
set nowrap
set number
set scrolljump=5
set scrolloff=3
set shell=zsh
set sidescroll=5
set shortmess+=c
set synmaxcol=240
set ttimeout
set ttimeoutlen=100

" formatting & whitespace
set expandtab
set formatoptions=cqj
set linebreak
set list
set listchars=tab:▷\ ,trail:•,nbsp:⋅
set shiftwidth=4
set showbreak=↵
set smarttab
set tabstop=4
set textwidth=80

" completion
set complete-=i " disable included files completion
set complete-=t " disable tags completion
set completeopt=menuone,noselect

" search
set hlsearch
set ignorecase
set incsearch
set smartcase

" wildmenu
set wildmenu
set wildmode=list:longest

set wildignore+=*.bmp,*.gif,*.jpg,*.jpeg,*.png " binary image files
set wildignore+=*.hg,*.git,*.svn               " Version control
set wildignore+=*.luac                         " Lua byte code
set wildignore+=*.o,*.obj,*.exe,*.hi,*.dll     " compiled object files
set wildignore+=*.pyc                          " Python byte code
set wildignore+=*DS_Store                      " OSX bullshit
set wildignore+=*aux,*.out,*.toc               " LaTeX intermediate files
set wildignore+=*spl                           " compiled spelling word lists
set wildignore+=*sw?                           " Vim swap files
set wildignorecase

" }}}

" Plugin Settings {{{

let mapleader=","

" auto-pairs
let g:AutoPairsMultilineClose = 0

" completor
let g:completor_complete_options = 'menuone,noselect'
let g:completor_gocode_binary = expand('~/go/bin/gocode')

" fzf
nnoremap <silent> <leader><space> :Buffers<cr>
nnoremap <silent> <leader>f :Files<cr>
nnoremap <silent> <leader>g :GFiles?<cr>
nnoremap <silent> <leader>s :Rg<cr>

command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%', '?'),
  \   <bang>0)

" vim-go
let g:go_addtags_transform = "camelcase"
let g:go_auto_type_info = 1
let g:go_fmt_command = "goimports"
let g:go_highlight_extra_types = 1
let g:go_highlight_operators = 1
let g:go_metalinter_command = "golangci-lint run -D errcheck"

" gutentags
let g:gutentags_cache_dir = "~/.cache/gutentags"
let g:gutentags_ctags_exclude = ['*.css', '*.json', '*.html', '*.md', '*.min.js', '*.txt', '*.xml']

" lightline
let g:lightline = {
  \ 'colorscheme': 'onedark',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste', 'readonly' ],
  \             [ 'filename' ],
  \             [ 'git-branch' ] ],
  \   'right': [ [ 'lineinfo' ],
  \              [ 'percent' ],
  \              [ 'filetype' ] ],
  \ },
  \ 'component_function': {
  \   'git-branch': 'LightlineFugitive',
  \ },
  \ 'separator': { 'left': '', 'right': '' },
  \ 'subseparator': { 'left': '', 'right': '' },
  \ }

function! LightlineFugitive() abort
    let l:branch = fugitive#head()
    return l:branch ==# '' ? '' : printf(' %s', branch)
endfunction

" terraform
let g:terraform_fmt_on_save=1

" ultisnips
let g:UltiSnipsExpandTrigger = "<NUL>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
let g:UltiSnipsSnippetDirectories = ["/Users/crdueck/UltiSnips"]

inoremap <expr> <tab> pumvisible() ? "\<c-n>" : "\<tab>"
inoremap <expr> <s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"
inoremap <expr> <cr> pumvisible() ? "\<c-r>=UltiSnips#ExpandSnippet()\<cr>" : "\<cr>"

" }}}

" Key Mappings {{{

" force save
cnoremap w! w !sudo tee > /dev/null %

" force quit
cnoremap qq qa!

" search/replace selection
xnoremap gs y:s/<c-r>"//g<left><left>
xnoremap Gs y:%s/<c-r>"//g<left><left>

" search/replace in current line
nnoremap gs :s//g<left><left>

" clear search highlighting
nnoremap <silent> <space> :nohlsearch<cr>

" cycle through buffers
nnoremap <silent> <tab> :bnext<cr>
nnoremap <silent> <s-tab> :bprev<cr>

" save 1,000,000 keystrokes
nnoremap ; :
" preserve ; functionality
nnoremap ;; ;

" more intuitive wrap-aware movement
nnoremap j gj
nnoremap k gk

" remove trailing whitespace
nnoremap <leader>w :call Preserve("%s/\\s\\+$//e")<cr>

function! Preserve(command) abort
    " save search history and cursor position
    let s = @
    let c = col(".")
    let l = line(".")
    " do the thing
    execute a:command
    " restore search history and cursor position
    let @/ = s
    call cursor(l, c)
endfunction

" make 'Y' consistent with 'C' and 'D'
nnoremap Y y$

" execute 'q' macro instead of the rarely desired Ex mode
nnoremap Q @q

nmap <leader>si :call <SID>SynStack()<CR>
function! <SID>SynStack()
    if !exists("*synstack")
        return
    endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" }}}

" Autocommands {{{

autocmd FileType help wincmd L
autocmd InsertLeave * set nopaste

augroup ft_dockerfile
    autocmd!
    autocmd BufEnter,BufNewFile Dockerfile* set filetype=dockerfile
augroup END

augroup ft_golang
    autocmd!
    autocmd FileType go nmap <leader>b <plug>(go-build)
    autocmd FileType go nmap <leader>r <plug>(go-run)
    autocmd FileType go nmap <leader>t <plug>(go-test)
    autocmd FileType go nmap <leader>tf <plug>(go-test-func)
    autocmd FileType go nmap <leader>tc <plug>(go-test-compile)
augroup END

augroup ft_haskell
    autocmd!
    autocmd BufEnter *.dump-simpl set filetype=haskell
    autocmd FileType haskell setlocal makeprg=stack
    autocmd FileType haskell nnoremap <leader>b :!stack build<cr>
    autocmd FileType haskell nnoremap <leader>r :!stack runghc %<cr>
    autocmd FileType haskell nnoremap <leader>t :!stack test<cr>
augroup END

augroup ft_java
    autocmd!
    autocmd FileType java let g:ale_enabled=0
augroup END

augroup ft_javascript
    autocmd!
    autocmd FileType javascript nnoremap <leader>r :!npm start<cr>
    autocmd FileType javascript nnoremap <leader>t :!npm test<cr>
    autocmd Filetype javascript setlocal shiftwidth=2 tabstop=2
augroup END

augroup ft_php
    autocmd!
    autocmd BufEnter,BufNewFile *.phps set filetype=php
augroup END

augroup ft_python
    autocmd!
    autocmd FileType python nnoremap <leader>r :!python3 %<cr>
    autocmd FileType python nnoremap <leader>t :!python3 -m unittest<cr>
augroup END

" }}}

" vim: set fdm=marker fmr={{{,}}} fdl=0 :"
