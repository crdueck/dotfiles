" Plugins {{{

call plug#begin('~/.vim/bundle')

Plug 'SirVer/ultisnips'
Plug 'christoomey/vim-tmux-navigator'
Plug 'davidhalter/jedi-vim', { 'for': 'python' }
Plug 'fatih/vim-go', { 'for': 'go' }
Plug 'honza/vim-snippets'
Plug 'itchyny/lightline.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'joshdick/onedark.vim'
Plug 'junegunn/fzf.vim' | Plug '/usr/local/opt/fzf'
Plug 'justinmk/vim-sneak'
Plug 'lifepillar/vim-mucomplete'
Plug 'ludovicchabant/vim-gutentags'
Plug 'shawncplus/phpcomplete.vim', { 'for': 'php' }
Plug 'sheerun/vim-polyglot'
Plug 'tommcdo/vim-lion'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-vinegar'
Plug 'w0rp/ale'

call plug#end()

" }}}

" Editor Settings {{{

" colorscheme {{{
colorscheme onedark
let g:onedark_termcolors=16
" }}}

" general {{{
set autoread
set autowrite
set background=dark
set dictionary=/usr/share/dict/words
set diffopt=filler,vertical
set encoding=utf-8
set grepformat^=%f:%l:%c:%m
set grepprg=rg\ --vimgrep
set hidden
set history=1000
set laststatus=2
set lazyredraw
set mouse=a
set nobackup
set noshowmode
set noswapfile
set number
set scrolljump=5
set scrolloff=3
set sidescroll=5
set shell=zsh
set shortmess+=acoOtT
set showbreak=↵
set splitright
set synmaxcol=800
set tags=./tags;
set ttimeout
set ttimeoutlen=100
" }}}

" search & complete {{{
set completeopt=menuone,noselect
set hlsearch
set ignorecase
set incsearch
set magic
set smartcase
" }}}

" wildmenu {{{
set wildmenu
set wildmode=list:longest

set wildignore+=*.hg,*.git,*.svn               " Version control
set wildignore+=*aux,*.out,*.toc               " LaTeX intermediate files
set wildignore+=*.bmp,*.gif,*.jpg,*.jpeg,*.png " binary images
set wildignore+=*.o,*.obj,*.exe,*.hi,*.dll     " compiled object files
set wildignore+=*spl                           " compiled spelling word lists
set wildignore+=*sw?                           " Vim swap files
set wildignore+=*DS_Store                      " OSX bullshit
set wildignore+=*.luac                         " Lua byte code
set wildignore+=*.pyc                          " Python byte code
set wildignorecase
" }}}

" formatting & whitespace {{{
set autoindent
set backspace=eol,indent,start
set expandtab
set formatoptions=cqj
set linebreak
set list
set listchars=tab:▷•,trail:•,nbsp:⋅
set shiftwidth=4
set smarttab
set textwidth=80
" }}}

" }}}

" Plugin Settings {{{

let mapleader=","

" auto-pairs {{{
let g:AutoPairsMapCR = 0
let g:AutoPairsMultilineClose = 0
" }}}

" fugitive {{{
nnoremap <leader>gs  :Gstatus<cr>
nnoremap <leader>gcm :Gcommit -v -q<cr>
nnoremap <leader>gco :Gread %<cr>
nnoremap <leader>gia :Gwrite<cr>
" }}}

" gutentags {{{
let g:gutentags_cache_dir = "~/.cache/gutentags"
let g:gutentags_ctags_exclude = ['*.css', '*.html', '*.js']
" }}}

" fzf {{{
nnoremap <leader>f :Files<cr>
command! -bang -nargs=? -complete=dir Files
  \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

nnoremap <leader>gf :GFiles?<cr>
nnoremap <leader><space> :Buffers<cr>

inoremap <c-x><c-f> <plug>(fzf-complete-path)
inoremap <c-x><c-k> <plug>(fzf-complete-word)
inoremap <c-x><c-l> <plug>(fzf-complete-line)

nnoremap <leader>rg :Rg<space>
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%', '?'),
  \   <bang>0)

let g:fzf_colors = {
  \ 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'],
  \ }
" }}}

" vim-go {{{
let g:go_addtags_transform = "camelcase"
let g:go_auto_type_info = 1
let g:go_fmt_command = "goimports"
let g:go_highlight_extra_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_types = 1
" }}}

" lightline {{{
let g:lightline = {
  \ 'colorscheme': 'onedark',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste', 'readonly' ],
  \             [ 'filename' ],
  \             [ 'git-branch' ] ],
  \   'right': [ [ 'lineinfo' ],
  \              [ 'percent' ],
  \              [ 'filetype' ] ],
  \ },
  \ 'component_function': {
  \   'git-branch': 'LightlineFugitive',
  \ },
  \ 'separator': { 'left': '', 'right': '' },
  \ 'subseparator': { 'left': '', 'right': '' },
  \ }

function! LightlineFugitive() abort
    let l:branch = fugitive#head()
    return l:branch ==# '' ? '' : printf(' %s', branch)
endfunction
" }}}

" mu-complete {{{
let g:mucomplete#enable_auto_at_startup = 1
let g:mucomplete#chains = {
  \ 'default':  ['ulti', 'omni'],
  \ 'markdown': ['ulti', 'dict', 'c-n'],
  \ 'sql': ['ulti', 'c-n'],
  \ }
let g:mucomplete#can_complete = {
  \ 'default': {
  \    'omni': { t -> strlen(&l:omnifunc) > 0 && t =~# '\%(\k\|\.\)$' }
  \ }
  \ }

imap <silent> <expr> <cr> OmniCR()

function! OmniCR() abort
    return pumvisible()
        \ ? "\<c-r>=UltiSnips#ExpandSnippetOrJump()\<cr>"
        \ : "\<plug>(MUcompleteCR)\<plug>AutoPairsReturn"
endfunction
" }}}

" ultisnips {{{
let g:UltiSnipsExpandTrigger = "<nop>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
" }}}

" }}}

" Key mappings {{{

" force quit
cnoremap qq qa!

" keep selection while indenting
xnoremap < <gv
xnoremap > >gv

" search/replace block
xnoremap gs y:s/<c-r>"//g<left><left>
xnoremap Gs y:%s/<c-r>"//g<left><left>

" search/replace in block
xnoremap gis :s//g<left><left>

" close quickfix and location list
nnoremap <leader>cl :cclose :lclose

" clear search highlighting
nnoremap <silent> <space> :nohlsearch<cr>

" jump between parenthese pairs with <tab>
nnoremap <tab> %

" save 1,000,000 keystrokes
nnoremap ; :
" preserve ; functionality
nnoremap ;; ;

" remove trailing whitespace
nnoremap <leader>w :call Preserve("%s/\\s\\+$//e")<cr>

function! Preserve(command) abort
    " save last search and cursor position
    let s = @
    let l = line(".")
    let c = col(".")
    " do the thing
    execute a:command
    " restore search history and cursor position
    let @/ = s
    call cursor(l, c)
endfunction

" go to older change
nnoremap g; g;zz
" go to newer change
nnoremap g, g,zz

" go to last position
nnoremap '' ''zz

" search/replace current line
nnoremap gs :s//g<left><left>

" vertical movement with wrap awareness
nnoremap j gj
nnoremap k gk

" center search results
nnoremap n nzzzv
nnoremap N Nzzzv

" prevent 'x' and 'c' from clobbering the default yank register
nnoremap x "_x
nnoremap c "_c

" make 'Y' consistent with 'C' and 'D'
nnoremap Y y$

" execute 'q' macro instead of the annoying Ex mode
nnoremap Q @q

if &diff
    " prev/next diff
    nunmap n
    nunmap N
    nnoremap n [czz
    nnoremap N ]czz
endif

" }}}

" Autocommands {{{

autocmd FileType help wincmd L
autocmd InsertLeave * set nopaste

augroup ft_golang
    autocmd!
    autocmd FileType go nmap <leader>b <plug>(go-build)
    autocmd FileType go nmap <leader>r <plug>(go-run)
    autocmd FileType go nmap <leader>t <plug>(go-test)
augroup END

augroup ft_haskell
    autocmd!
    autocmd BufEnter *.dump-simpl set filetype=haskell
    autocmd FileType haskell setlocal makeprg=stack\ repl
    autocmd FileType haskell nnoremap <leader>b :!stack build<cr>
    autocmd FileType haskell nnoremap <leader>r :!stack runghc %<cr>
    autocmd FileType haskell nnoremap <leader>t :!stack test<cr>
augroup END

augroup ft_java
    autocmd!
    autocmd FileType java let g:ale_enabled=0
augroup END

augroup ft_javascript
    autocmd!
    autocmd FileType javascript nnoremap <leader>r :!npm start<cr>
    autocmd FileType javascript nnoremap <leader>t :!npm test<cr>
    autocmd Filetype javascript setlocal shiftwidth=2 tabstop=2
augroup END

augroup ft_php
    autocmd!
    autocmd BufNewFile,BufRead *.phps set filetype=php
augroup END

augroup ft_python
    autocmd!
    autocmd FileType python nnoremap <leader>r :!python3 %<cr>
augroup END

augroup ft_tex
    autocmd!
    autocmd FileType tex setlocal makeprg=pdflatex
    autocmd FileType tex setlocal formatoptions+=t
augroup END

" }}}

" vim: set fdm=marker fmr={{{,}}} fdl=0 :"
